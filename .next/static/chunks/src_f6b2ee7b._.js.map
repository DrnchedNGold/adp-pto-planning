{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,6LAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,mcACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,6LAAC,oKAAA,CAAA,OAAmB;QAClB,aAAU;QACV,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,uNACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  useFormState,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  )\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/utils/firebaseErrorHandler.ts"],"sourcesContent":["import { FirebaseError } from \"firebase/app\";\n\nconst errorMessages = {\n    'auth/invalid-credential': 'Email and Password do not match our records.',\n    'auth/user-not-found': 'No user found with this email.',\n    'auth/wrong-password': 'Email and Password do not match our records.',\n    'auth/email-already-in-use': 'This email is already in use.',\n    'auth/weak-password': 'Password should be at least 6 characters.',\n    'auth/invalid-email': 'Invalid email address.',\n    'An error occurred. Please try again.': 'Check your email and password and try again.',\n};\n\nexport function getFriendlyFirebaseErrorMessage(err: unknown): string {\n    if (err instanceof FirebaseError) {\n        // Prefer the code property if available\n        if (err.code && err.code in errorMessages) {\n            return errorMessages[err.code as keyof typeof errorMessages];\n        }\n        // Fallback: Extract the key between parentheses in the message\n        const match = err.message.match(/\\(([^)]+)\\)/);\n        const errorKey = match ? match[1] : null;\n        if (errorKey && errorKey in errorMessages) {\n            return errorMessages[errorKey as keyof typeof errorMessages];\n        }\n        return err.message;\n    }\n    // Fallback for non-Firebase errors\n    return \"An unexpected error occurred. Please try again.\";\n}"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,MAAM,gBAAgB;IAClB,2BAA2B;IAC3B,uBAAuB;IACvB,uBAAuB;IACvB,6BAA6B;IAC7B,sBAAsB;IACtB,sBAAsB;IACtB,wCAAwC;AAC5C;AAEO,SAAS,gCAAgC,GAAY;IACxD,IAAI,eAAe,iKAAA,CAAA,gBAAa,EAAE;QAC9B,wCAAwC;QACxC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,eAAe;YACvC,OAAO,aAAa,CAAC,IAAI,IAAI,CAA+B;QAChE;QACA,+DAA+D;QAC/D,MAAM,QAAQ,IAAI,OAAO,CAAC,KAAK,CAAC;QAChC,MAAM,WAAW,QAAQ,KAAK,CAAC,EAAE,GAAG;QACpC,IAAI,YAAY,YAAY,eAAe;YACvC,OAAO,aAAa,CAAC,SAAuC;QAChE;QACA,OAAO,IAAI,OAAO;IACtB;IACA,mCAAmC;IACnC,OAAO;AACX","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/components/forms/loginForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { signInWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { getFriendlyFirebaseErrorMessage } from \"@/utils/firebaseErrorHandler\";\nimport { useRouter } from \"next/navigation\";\nimport { EyeIcon, EyeSlashIcon } from \"@heroicons/react/24/outline\";\nimport { toast } from \"sonner\";\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { FcGoogle } from \"react-icons/fc\";\n\ninterface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nexport function LoginForm({\n    onLogin,\n    onForgotPassword,\n}: {\n    onLogin: () => void;\n    onForgotPassword: () => void;\n}) {\n    const [error, setError] = useState<string | null>(null);\n    const [showResendLink, setShowResendLink] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n    const router = useRouter();\n\n    const form = useForm<LoginFormValues>({\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n        },\n    });\n\n    const handleGoogleSignIn = async () => {\n        try {\n            const provider = new GoogleAuthProvider();\n            const result = await signInWithPopup(auth, provider);\n            const user = result.user;\n\n            console.log(\"Google sign-in successful:\", user);\n            onLogin();\n            router.push(\"/home\");\n        } catch (err: unknown) {\n            toast.error(\"Failed to sign in with Google. Please try again.\");\n            console.error(\"Google sign-in error:\", err);\n        }\n    };\n\n    const handleLogin = async (values: LoginFormValues) => {\n        setError(null);\n\n        try {\n            const userCredential = await signInWithEmailAndPassword(auth, values.email, values.password);\n            const user = userCredential.user;\n\n            // Force refresh the user's emailVerified status\n            await user.reload();\n\n            if (!user.emailVerified) {\n                setError(\"Your email is not verified.\");\n                setShowResendLink(true);\n                return;\n            }\n\n            onLogin();\n            router.push(\"/home\");\n        } catch (err: unknown) {\n            setError(getFriendlyFirebaseErrorMessage(err));\n        }\n    };\n\n    const handleResendVerification = async () => {\n        try {\n            const values = form.getValues();\n            const userCredential = await signInWithEmailAndPassword(auth, values.email, values.password);\n            const user = userCredential.user;\n\n            await sendEmailVerification(user);\n            toast.success(\"Verification email resent. Please check your inbox.\");\n            setShowResendLink(false);\n        } catch (err: unknown) {\n            toast.error(\"Failed to resend verification email. Please try again.\");\n        }\n    };\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(handleLogin)}\n                className=\"space-y-4 w-full\"\n            >\n                {error && <p className=\"text-sm text-red-500\">{error}</p>}\n                {showResendLink && (\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Your email is not verified.{\" \"}\n                        <button\n                            type=\"button\"\n                            onClick={handleResendVerification}\n                            className=\"text-blue-500 hover:underline\"\n                        >\n                            Click here to resend the verification email.\n                        </button>\n                    </p>\n                )}\n\n                <FormField\n                    name=\"email\"\n                    control={form.control}\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                                <Input\n                                    id=\"email\"\n                                    placeholder=\"Enter your email\"\n                                    {...field}\n                                />\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n\n                <FormField\n                    name=\"password\"\n                    control={form.control}\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                                <div className=\"relative\">\n                                    <Input\n                                        id=\"password\"\n                                        type={showPassword ? \"text\" : \"password\"}\n                                        placeholder=\"Enter your password\"\n                                        {...field}\n                                    />\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => setShowPassword(!showPassword)}\n                                        className=\"absolute inset-y-0 right-3 flex items-center text-gray-500 dark:text-gray-400\"\n                                    >\n                                        {showPassword ? (\n                                            <EyeSlashIcon className=\"h-5 w-5\" />\n                                        ) : (\n                                            <EyeIcon className=\"h-5 w-5\" />\n                                        )}\n                                    </button>\n                                </div>\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n\n                {/* Forgot Password Link */}\n                <div className=\"mt-2 text-left\">\n                    <button\n                        type=\"button\"\n                        onClick={onForgotPassword}\n                        className=\"text-sm text-blue-500 hover:underline\"\n                    >\n                        Forgot password?\n                    </button>\n                </div>\n\n                <Button type=\"submit\" className=\"w-full\">\n                    Log In\n                </Button>\n\n                {/* Divider with \"or\" */}\n                <div className=\"flex items-center my-4\">\n                    <div className=\"flex-grow border-t border-gray-300 dark:border-gray-600\"></div>\n                    <span className=\"mx-2 text-sm text-gray-500 dark:text-gray-400\">or</span>\n                    <div className=\"flex-grow border-t border-gray-300 dark:border-gray-600\"></div>\n                </div>\n\n                {/* Google Sign-In Button */}\n                <Button\n                    type=\"button\"\n                    onClick={handleGoogleSignIn}\n                    className=\"w-full flex items-center justify-center gap-2 dark:bg-black dark:text-stone-300 dark:border-stone-600 border-1 bg- text-black border-black\"\n                >\n                    <FcGoogle className=\"h-5 w-5\" />\n                    Sign in with Google\n                </Button>\n            </form>\n        </Form>\n    );\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 749, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/components/forms/registrationForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { createUserWithEmailAndPassword, sendEmailVerification } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { getFriendlyFirebaseErrorMessage } from \"@/utils/firebaseErrorHandler\";\nimport { EyeIcon, EyeSlashIcon } from \"@heroicons/react/24/outline\";\nimport { toast } from \"sonner\"; // Import Sonner's toast function\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\"; // Import GoogleAuthProvider\nimport { FcGoogle } from \"react-icons/fc\"; // Import Google icon for the button\n\ninterface RegistrationFormValues {\n    email: string;\n    password: string;\n    confirmPassword: string;\n}\n\nexport function RegistrationForm({ onRegister }: { onRegister: () => void }) {\n    const [error, setError] = useState<string | null>(null);\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n    const form = useForm<RegistrationFormValues>({\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n        },\n    });\n\n    const handleGoogleSignIn = async () => {\n        try {\n            const provider = new GoogleAuthProvider(); // Initialize GoogleAuthProvider\n            const result = await signInWithPopup(auth, provider); // Sign in with Google popup\n            const user = result.user;\n\n            console.log(\"Google sign-in successful:\", user);\n            onRegister(); // Notify the parent component\n        } catch (err: unknown) {\n            toast.error(\"Failed to sign in with Google. Please try again.\");\n            console.error(\"Google sign-in error:\", err);\n        }\n    };\n\n    const handleRegister = async (values: RegistrationFormValues) => {\n        setError(null);\n\n        if (values.password !== values.confirmPassword) {\n            setError(\"Passwords do not match.\");\n            return;\n        }\n\n        try {\n            const userCredential = await createUserWithEmailAndPassword(auth, values.email, values.password);\n            const user = userCredential.user;\n\n            // Send email verification\n            await sendEmailVerification(user);\n\n            // Show toast notification\n            toast.success(\"Verification email sent! Please check your inbox and verify your email before logging in.\");\n\n            onRegister(); // Notify the parent component to switch to the login form\n        } catch (err: unknown) {\n            setError(getFriendlyFirebaseErrorMessage(err));\n        }\n    };\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(handleRegister)}\n                className=\"space-y-4 w-full\"\n            >\n                {error && <p className=\"text-sm text-red-500\">{error}</p>}\n\n                <FormField\n                    name=\"email\"\n                    control={form.control}\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                                <Input\n                                    id=\"email\"\n                                    placeholder=\"Enter your email\"\n                                    {...field}\n                                />\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n\n                <FormField\n                    name=\"password\"\n                    control={form.control}\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                                <div className=\"relative\">\n                                    <Input\n                                        id=\"password\"\n                                        type={showPassword ? \"text\" : \"password\"}\n                                        placeholder=\"Enter your password\"\n                                        {...field}\n                                    />\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => setShowPassword(!showPassword)}\n                                        className=\"absolute inset-y-0 right-3 flex items-center text-gray-500 dark:text-gray-400\"\n                                    >\n                                        {showPassword ? (\n                                            <EyeSlashIcon className=\"h-5 w-5\" />\n                                        ) : (\n                                            <EyeIcon className=\"h-5 w-5\" />\n                                        )}\n                                    </button>\n                                </div>\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n\n                <FormField\n                    name=\"confirmPassword\"\n                    control={form.control}\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Confirm Password</FormLabel>\n                            <FormControl>\n                                <div className=\"relative\">\n                                    <Input\n                                        id=\"confirmPassword\"\n                                        type={showConfirmPassword ? \"text\" : \"password\"}\n                                        placeholder=\"Confirm your password\"\n                                        {...field}\n                                    />\n                                    <button\n                                        type=\"button\"\n                                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                        className=\"absolute inset-y-0 right-3 flex items-center text-gray-500 dark:text-gray-400\"\n                                    >\n                                        {showConfirmPassword ? (\n                                            <EyeSlashIcon className=\"h-5 w-5\" />\n                                        ) : (\n                                            <EyeIcon className=\"h-5 w-5\" />\n                                        )}\n                                    </button>\n                                </div>\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n\n                <Button type=\"submit\" className=\"w-full\">\n                    Register\n                </Button>\n\n                {/* Divider with \"or\" */}\n                <div className=\"flex items-center my-4\">\n                    <div className=\"flex-grow border-t border-gray-300 dark:border-gray-600\"></div>\n                    <span className=\"mx-2 text-sm text-gray-500 dark:text-gray-400\">or</span>\n                    <div className=\"flex-grow border-t border-gray-300 dark:border-gray-600\"></div>\n                </div>\n\n                {/* Google Sign-In Button */}\n                <Button\n                    type=\"button\"\n                    onClick={handleGoogleSignIn}\n                    className=\"w-full flex items-center justify-center gap-2 dark:bg-black dark:text-stone-300 dark:border-stone-600 border-1 bg-white text-black border-black\"\n                >\n                    <FcGoogle className=\"h-5 w-5\" /> {/* Google Icon */}\n                    Continue with Google\n                </Button>\n            </form>\n        </Form>\n    );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA,qPAAgC,iCAAiC;AACjE,2XAAqE,4BAA4B;AAAjG;AACA,8PAA2C,oCAAoC;;;AAb/E;;;;;;;;;;;;;AAqBO,SAAS,iBAAiB,EAAE,UAAU,EAA8B;;IACvE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE/D,MAAM,OAAO,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAA0B;QACzC,eAAe;YACX,OAAO;YACP,UAAU;YACV,iBAAiB;QACrB;IACJ;IAEA,MAAM,qBAAqB;QACvB,IAAI;YACA,MAAM,WAAW,IAAI,wNAAA,CAAA,qBAAkB,IAAI,gCAAgC;YAC3E,MAAM,SAAS,MAAM,CAAA,GAAA,qNAAA,CAAA,kBAAe,AAAD,EAAE,yHAAA,CAAA,OAAI,EAAE,WAAW,4BAA4B;YAClF,MAAM,OAAO,OAAO,IAAI;YAExB,QAAQ,GAAG,CAAC,8BAA8B;YAC1C,cAAc,8BAA8B;QAChD,EAAE,OAAO,KAAc;YACnB,2IAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ,QAAQ,KAAK,CAAC,yBAAyB;QAC3C;IACJ;IAEA,MAAM,iBAAiB,OAAO;QAC1B,SAAS;QAET,IAAI,OAAO,QAAQ,KAAK,OAAO,eAAe,EAAE;YAC5C,SAAS;YACT;QACJ;QAEA,IAAI;YACA,MAAM,iBAAiB,MAAM,CAAA,GAAA,qOAAA,CAAA,iCAA8B,AAAD,EAAE,yHAAA,CAAA,OAAI,EAAE,OAAO,KAAK,EAAE,OAAO,QAAQ;YAC/F,MAAM,OAAO,eAAe,IAAI;YAEhC,0BAA0B;YAC1B,MAAM,CAAA,GAAA,4NAAA,CAAA,wBAAqB,AAAD,EAAE;YAE5B,0BAA0B;YAC1B,2IAAA,CAAA,QAAK,CAAC,OAAO,CAAC;YAEd,cAAc,0DAA0D;QAC5E,EAAE,OAAO,KAAc;YACnB,SAAS,CAAA,GAAA,uIAAA,CAAA,kCAA+B,AAAD,EAAE;QAC7C;IACJ;IAEA,qBACI,6LAAC,mIAAA,CAAA,OAAI;QAAE,GAAG,IAAI;kBACV,cAAA,6LAAC;YACG,UAAU,KAAK,YAAY,CAAC;YAC5B,WAAU;;gBAET,uBAAS,6LAAC;oBAAE,WAAU;8BAAwB;;;;;;8BAE/C,6LAAC,mIAAA,CAAA,YAAS;oBACN,MAAK;oBACL,SAAS,KAAK,OAAO;oBACrB,QAAQ,CAAC,EAAE,KAAK,EAAE,iBACd,6LAAC,mIAAA,CAAA,WAAQ;;8CACL,6LAAC,mIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,mIAAA,CAAA,cAAW;8CACR,cAAA,6LAAC,oIAAA,CAAA,QAAK;wCACF,IAAG;wCACH,aAAY;wCACX,GAAG,KAAK;;;;;;;;;;;8CAGjB,6LAAC,mIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;8BAKxB,6LAAC,mIAAA,CAAA,YAAS;oBACN,MAAK;oBACL,SAAS,KAAK,OAAO;oBACrB,QAAQ,CAAC,EAAE,KAAK,EAAE,iBACd,6LAAC,mIAAA,CAAA,WAAQ;;8CACL,6LAAC,mIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,mIAAA,CAAA,cAAW;8CACR,cAAA,6LAAC;wCAAI,WAAU;;0DACX,6LAAC,oIAAA,CAAA,QAAK;gDACF,IAAG;gDACH,MAAM,eAAe,SAAS;gDAC9B,aAAY;gDACX,GAAG,KAAK;;;;;;0DAEb,6LAAC;gDACG,MAAK;gDACL,SAAS,IAAM,gBAAgB,CAAC;gDAChC,WAAU;0DAET,6BACG,6LAAC,0NAAA,CAAA,eAAY;oDAAC,WAAU;;;;;2EAExB,6LAAC,gNAAA,CAAA,UAAO;oDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;8CAKnC,6LAAC,mIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;8BAKxB,6LAAC,mIAAA,CAAA,YAAS;oBACN,MAAK;oBACL,SAAS,KAAK,OAAO;oBACrB,QAAQ,CAAC,EAAE,KAAK,EAAE,iBACd,6LAAC,mIAAA,CAAA,WAAQ;;8CACL,6LAAC,mIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,mIAAA,CAAA,cAAW;8CACR,cAAA,6LAAC;wCAAI,WAAU;;0DACX,6LAAC,oIAAA,CAAA,QAAK;gDACF,IAAG;gDACH,MAAM,sBAAsB,SAAS;gDACrC,aAAY;gDACX,GAAG,KAAK;;;;;;0DAEb,6LAAC;gDACG,MAAK;gDACL,SAAS,IAAM,uBAAuB,CAAC;gDACvC,WAAU;0DAET,oCACG,6LAAC,0NAAA,CAAA,eAAY;oDAAC,WAAU;;;;;2EAExB,6LAAC,gNAAA,CAAA,UAAO;oDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;8CAKnC,6LAAC,mIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;8BAKxB,6LAAC,qIAAA,CAAA,SAAM;oBAAC,MAAK;oBAAS,WAAU;8BAAS;;;;;;8BAKzC,6LAAC;oBAAI,WAAU;;sCACX,6LAAC;4BAAI,WAAU;;;;;;sCACf,6LAAC;4BAAK,WAAU;sCAAgD;;;;;;sCAChE,6LAAC;4BAAI,WAAU;;;;;;;;;;;;8BAInB,6LAAC,qIAAA,CAAA,SAAM;oBACH,MAAK;oBACL,SAAS;oBACT,WAAU;;sCAEV,6LAAC,iJAAA,CAAA,WAAQ;4BAAC,WAAU;;;;;;wBAAY;wBAAoB;;;;;;;;;;;;;;;;;;AAMxE;GApKgB;;QAKC,iKAAA,CAAA,UAAO;;;KALR","debugId":null}},
    {"offset": {"line": 1122, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/components/forms/resetPasswordForm.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { sendPasswordResetEmail } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { toast } from \"sonner\";\n\n// Define schema for form validation\nconst resetPasswordSchema = z.object({\n    email: z.string().email(\"Invalid email address\").nonempty(\"Email is required\"),\n});\n\ntype ResetPasswordFormValues = z.infer<typeof resetPasswordSchema>;\n\nexport function ResetPasswordForm({\n    onSuccess,\n    buttonText = \"Reset password\",\n    inputSpacing = \"mb-4\",\n}: {\n    onSuccess: () => void;\n    buttonText?: string;\n    inputSpacing?: string;\n}) {\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const form = useForm<ResetPasswordFormValues>({\n        resolver: zodResolver(resetPasswordSchema),\n        defaultValues: {\n            email: \"\",\n        },\n    });\n\n    const handlePasswordReset = async (values: ResetPasswordFormValues) => {\n        setIsSubmitting(true);\n        try {\n            await sendPasswordResetEmail(auth, values.email);\n            toast.success(\"Password reset email sent. Please check your inbox.\");\n            onSuccess(); // Notify parent of success\n        } catch (error: unknown) {\n            toast.error(\"Failed to send password reset email. Please try again.\");\n            console.error(\"Password reset error:\", error);\n        } finally {\n            setIsSubmitting(false);\n        }\n    };\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(handlePasswordReset)}\n                className=\"space-y-4 w-full\"\n            >\n                <FormField\n                    name=\"email\"\n                    control={form.control}\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                                <Input\n                                    id=\"email\"\n                                    type=\"email\"\n                                    placeholder=\"Enter your email\"\n                                    {...field}\n                                />\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                    )}\n                />\n                <Button type=\"submit\" className=\"w-full\" disabled={isSubmitting}>\n                    {isSubmitting ? \"Sending...\" : buttonText}\n                </Button>\n            </form>\n        </Form>\n    );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAXA;;;;;;;;;;;AAaA,oCAAoC;AACpC,MAAM,sBAAsB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC,yBAAyB,QAAQ,CAAC;AAC9D;AAIO,SAAS,kBAAkB,EAC9B,SAAS,EACT,aAAa,gBAAgB,EAC7B,eAAe,MAAM,EAKxB;;IACG,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,OAAO,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAA2B;QAC1C,UAAU,CAAA,GAAA,iKAAA,CAAA,cAAW,AAAD,EAAE;QACtB,eAAe;YACX,OAAO;QACX;IACJ;IAEA,MAAM,sBAAsB,OAAO;QAC/B,gBAAgB;QAChB,IAAI;YACA,MAAM,CAAA,GAAA,6NAAA,CAAA,yBAAsB,AAAD,EAAE,yHAAA,CAAA,OAAI,EAAE,OAAO,KAAK;YAC/C,2IAAA,CAAA,QAAK,CAAC,OAAO,CAAC;YACd,aAAa,2BAA2B;QAC5C,EAAE,OAAO,OAAgB;YACrB,2IAAA,CAAA,QAAK,CAAC,KAAK,CAAC;YACZ,QAAQ,KAAK,CAAC,yBAAyB;QAC3C,SAAU;YACN,gBAAgB;QACpB;IACJ;IAEA,qBACI,6LAAC,mIAAA,CAAA,OAAI;QAAE,GAAG,IAAI;kBACV,cAAA,6LAAC;YACG,UAAU,KAAK,YAAY,CAAC;YAC5B,WAAU;;8BAEV,6LAAC,mIAAA,CAAA,YAAS;oBACN,MAAK;oBACL,SAAS,KAAK,OAAO;oBACrB,QAAQ,CAAC,EAAE,KAAK,EAAE,iBACd,6LAAC,mIAAA,CAAA,WAAQ;;8CACL,6LAAC,mIAAA,CAAA,YAAS;8CAAC;;;;;;8CACX,6LAAC,mIAAA,CAAA,cAAW;8CACR,cAAA,6LAAC,oIAAA,CAAA,QAAK;wCACF,IAAG;wCACH,MAAK;wCACL,aAAY;wCACX,GAAG,KAAK;;;;;;;;;;;8CAGjB,6LAAC,mIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;8BAIxB,6LAAC,qIAAA,CAAA,SAAM;oBAAC,MAAK;oBAAS,WAAU;oBAAS,UAAU;8BAC9C,eAAe,eAAe;;;;;;;;;;;;;;;;;AAKnD;GA7DgB;;QAUC,iKAAA,CAAA,UAAO;;;KAVR","debugId":null}},
    {"offset": {"line": 1265, "column": 0}, "map": {"version":3,"sources":["file:///Users/zemo/Developer/code/resume%20projects/adp-pto-planning/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useAuth } from \"@/context/authContext\";\nimport { useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\nimport { LoginForm } from \"@/components/forms/loginForm\";\nimport { RegistrationForm } from \"@/components/forms/registrationForm\";\nimport { ResetPasswordForm } from \"@/components/forms/resetPasswordForm\";\nimport Image from \"next/image\";\n\nexport default function LandingPage() {\n  const { user, loading } = useAuth();\n  const router = useRouter();\n  const [view, setView] = useState<\"login\" | \"register\" | \"resetPassword\">(\"login\"); // State to toggle views\n\n  useEffect(() => {\n    if (!loading && user) {\n      router.push(\"/home\"); // Redirect to home page if authenticated\n    }\n  }, [user, loading, router]);\n\n  if (loading) {\n    return <p>Loading...</p>; // Show a loading state while checking auth\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen px-6\">\n      {/* Branding Section */}\n      <div className=\"relative w-full mb-6\" style={{ top: \"-200px\" }}>\n        <div className=\"flex items-center justify-center\">\n          {/* Left Line */}\n          <hr className=\"w-2/5 border-gray-300 dark:border-gray-600\" />\n          {/* Branding */}\n          <div className=\"px-4\">\n            <div className=\"flex items-center space-x-4 bg-transparent\">\n              <Image\n                src=\"/logo.png\"\n                alt=\"Marcus Logo\"\n                width={60} // Increased size\n                height={60} // Increased size\n              />\n              <h2 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n                Marcus\n              </h2>\n            </div>\n          </div>\n          {/* Right Line */}\n          <hr className=\"w-2/5 border-gray-300 dark:border-gray-600\" />\n        </div>\n      </div>\n\n      {/* Form Section */}\n      <div className=\"w-full max-w-md\">\n        {view === \"login\" && (\n          <>\n            {/* Form Label */}\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n              Sign in\n            </h1>\n\n            {/* Helper Text */}\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\n              New to this app?{\" \"}\n              <button\n                onClick={() => setView(\"register\")}\n                className=\"text-blue-500 hover:underline\"\n              >\n                Sign up for an account\n              </button>\n            </p>\n\n            {/* Login Form */}\n            <LoginForm\n              onLogin={() => router.push(\"/home\")}\n              onForgotPassword={() => setView(\"resetPassword\")} // Switch to reset password view\n            />\n          </>\n        )}\n\n        {view === \"register\" && (\n          <>\n            {/* Form Label */}\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n              Sign up\n            </h1>\n\n            {/* Helper Text */}\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\n              Already have an account?{\" \"}\n              <button\n                onClick={() => setView(\"login\")}\n                className=\"text-blue-500 hover:underline\"\n              >\n                Sign in\n              </button>\n            </p>\n\n            {/* Registration Form */}\n            <RegistrationForm onRegister={() => setView(\"login\")} />\n          </>\n        )}\n\n        {view === \"resetPassword\" && (\n          <>\n            {/* Form Label */}\n            <h1 className=\"text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4\">\n              Reset your password\n            </h1>\n\n            {/* Reset Password Form */}\n            <ResetPasswordForm\n              onSuccess={() => setView(\"login\")}\n              buttonText=\"Send reset link\"\n            />\n\n            {/* Helper Text */}\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-4\">\n              Remembered?{\" \"}\n              <button\n                onClick={() => setView(\"login\")}\n                className=\"text-blue-500 hover:underline\"\n              >\n                Go back to sign in\n              </button>\n            </p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AARA;;;;;;;;AAUe,SAAS;;IACtB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAChC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAA0C,UAAU,wBAAwB;IAE3G,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;iCAAE;YACR,IAAI,CAAC,WAAW,MAAM;gBACpB,OAAO,IAAI,CAAC,UAAU,yCAAyC;YACjE;QACF;gCAAG;QAAC;QAAM;QAAS;KAAO;IAE1B,IAAI,SAAS;QACX,qBAAO,6LAAC;sBAAE;;;;;kBAAgB,2CAA2C;IACvE;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;gBAAuB,OAAO;oBAAE,KAAK;gBAAS;0BAC3D,cAAA,6LAAC;oBAAI,WAAU;;sCAEb,6LAAC;4BAAG,WAAU;;;;;;sCAEd,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAI,WAAU;;kDACb,6LAAC,gIAAA,CAAA,UAAK;wCACJ,KAAI;wCACJ,KAAI;wCACJ,OAAO;wCACP,QAAQ;;;;;;kDAEV,6LAAC;wCAAG,WAAU;kDAAsD;;;;;;;;;;;;;;;;;sCAMxE,6LAAC;4BAAG,WAAU;;;;;;;;;;;;;;;;;0BAKlB,6LAAC;gBAAI,WAAU;;oBACZ,SAAS,yBACR;;0CAEE,6LAAC;gCAAG,WAAU;0CAA2D;;;;;;0CAKzE,6LAAC;gCAAE,WAAU;;oCAAgD;oCAC1C;kDACjB,6LAAC;wCACC,SAAS,IAAM,QAAQ;wCACvB,WAAU;kDACX;;;;;;;;;;;;0CAMH,6LAAC,2IAAA,CAAA,YAAS;gCACR,SAAS,IAAM,OAAO,IAAI,CAAC;gCAC3B,kBAAkB,IAAM,QAAQ;;;;;;;;oBAKrC,SAAS,4BACR;;0CAEE,6LAAC;gCAAG,WAAU;0CAA2D;;;;;;0CAKzE,6LAAC;gCAAE,WAAU;;oCAAgD;oCAClC;kDACzB,6LAAC;wCACC,SAAS,IAAM,QAAQ;wCACvB,WAAU;kDACX;;;;;;;;;;;;0CAMH,6LAAC,kJAAA,CAAA,mBAAgB;gCAAC,YAAY,IAAM,QAAQ;;;;;;;;oBAI/C,SAAS,iCACR;;0CAEE,6LAAC;gCAAG,WAAU;0CAA2D;;;;;;0CAKzE,6LAAC,mJAAA,CAAA,oBAAiB;gCAChB,WAAW,IAAM,QAAQ;gCACzB,YAAW;;;;;;0CAIb,6LAAC;gCAAE,WAAU;;oCAAgD;oCAC/C;kDACZ,6LAAC;wCACC,SAAS,IAAM,QAAQ;wCACvB,WAAU;kDACX;;;;;;;;;;;;;;;;;;;;;;;;;;AASf;GAxHwB;;QACI,iIAAA,CAAA,UAAO;QAClB,qIAAA,CAAA,YAAS;;;KAFF","debugId":null}}]
}